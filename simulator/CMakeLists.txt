cmake_minimum_required (VERSION 3.6)
project (LED-CUBE-SIMULATOR)

set (SIMULATOR_VERSION_MAJOR 1)
set (SIMULATOR_VERSION_MINOR 0)
set (CMAKE_CXX_STANDARD 14)

if (NOT CMAKE_BUILD_TYPE)
	set (CMAKE_BUILD_TYPE Release)
endif()

set (CMAKE_CXX_FLAGS "-Wall")
set (CMAKE_CXX_FLAGS_DEBUG "-g")
set (CMAKE_CXX_FLAGS_RELEASE "-O3")

FIND_PACKAGE(PythonInterp 3)
FIND_PACKAGE(PythonLibs 3)

find_library(SFML-GRAPHICS NAMES sfml-graphics-2 sfml-graphics PATHS ${SFML-DIR})
if (NOT SFML-GRAPHICS)
    message(FATAL_ERROR "Unable to find sfml-graphics library/framework, is sfml installed? Please see wiki for details.")
endif()

find_library(SFML-WINDOW NAMES sfml-window-2 sfml-window PATHS ${SFML-DIR}/bin)
if (NOT SFML-WINDOW)
    message(FATAL_ERROR "Unable to find sfml-window library/framework, is sfml installed? Please see wiki for details.")
endif()

find_library(SFML-SYSTEM NAMES sfml-system-2 sfml-system PATHS ${SFML-DIR}/bin)
if (NOT SFML-SYSTEM)
    message(FATAL_ERROR "Unable to find sfml-system library/framework, is sfml installed? Please see wiki for details.")
endif()

find_library(SFML-NETWORK NAMES sfml-network-2 sfml-network PATHS ${SFML-DIR}/bin)
if (NOT SFML-NETWORK)
    message(FATAL_ERROR "Unable to find sfml-network library/framework, is sfml installed? Please see wiki for details.")
endif()

find_library(OPENGL NAMES GL OpenGL opengl32)
if (NOT OPENGL)
	message(FATAL_ERROR "Unable to find the OpenGL library. This should be installed by default on most modern operating systems.")
endif()

find_path(GLM "glm/mat4x4.hpp" PATHS ${GLM-DIR} "/usr/local/glm/include" "/usr/include/")
if (NOT GLM)
	message(FATAL_ERROR "Unable to locate the glm header library. Please see the wiki for installation details or set the GLM-DIR variable when calling cmake. For example, cmake -DGLM-DIR=\"/usr/local/glm/include\" ")
endif()

find_path(SFML-INCLUDES "SFML/Graphics.hpp" HINT "${SFML-GRAPHICS}//..//include" PATHS ${SFML-DIR}/include)
if (NOT SFML-INCLUDES)
	message(FATAL_ERROR "SFML seems to be installed but cannot located the included header files. Please set the SFML-DIR variable when calling cmake. For example, cmake -DSFML-DIR=\"/usr/local/sfml\"")
endif()

if ((WIN32 OR UNIX) AND NOT APPLE)
	find_library(GLEW NAMES GLEW glew32)
	if (NOT GLEW)
    		message(FATAL_ERROR "Unable to located the glew extension library. Please see the wiki for more details or install glew. If on Windows, please add the glew directory to your Path Environment variable.")
	endif()
	find_path(GLEW-INCLUDES "GL/glew.h" HINT "${GLEW}//..//..//include" PATH "${GLEW-DIR}/include")
	if (NOT GLEW-INCLUDES)
		message(FATAL_ERROR "The glew extension library is installed but cannot locate the glew.h header file. Please see the wiki for tips troubleshooting.")
	endif()
	add_definitions(-DUSE_GLEW)
endif()
if (UNIX)
	set(PTHREAD -lpthread)
	add_definitions(-DUNIX)
endif()
if (APPLE)
	add_definitions(-DAPPLE)
endif()
if (WIN32)
	set(ICON "resources/led_cube.rc")
endif()

add_executable(led_cube_simulator led_cube_simulator.cpp udp_server.cpp render_thread.cpp virtual_terminal/py.cpp ${ICON})
target_include_directories(led_cube_simulator PRIVATE ${PYTHON_INCLUDE_DIRS} ${SFML-INCLUDES} ${GLEW-INCLUDES} ${GLM})
target_link_libraries(led_cube_simulator ${SFML-GRAPHICS} ${SFML-WINDOW} ${SFML-SYSTEM} ${SFML-NETWORK} ${OPENGL} ${GLEW} ${PYTHON_LIBRARIES} ${PTHREAD})

install (TARGETS led_cube_simulator DESTINATION bin)
